use std::str::FromStr;

grammar;

pub Term: i32 = {
    <n:Num> => n,
    "(" <t:Term> ")" => t
}

Num: i32 = r"[0-9]+" => i32::from_str(<>).unwrap();

// 8.3
LineTerminator: &'input str = {
    "\n",
    "\r\n"
}

// 8.3
Separator: &'input str = {
    ";",
    LineTerminator
}

// 8.4
LineTerminatorEscapeSequence: (&'input str, &'input str) = {
    "\\" LineTerminator
}

// 8.4
Whitespace: &'input str = {
    "\t",
    r"\x0b", // vertical tab
    r"\x0c", // form feed
    "\r",
    " "
}

// 8.5
Comment: &'input str = {
    SingleLineComment,
    MultiLineComment
}

// 8.5
SingleLineComment: &'input str = {
    r"#.*"
}

// 8.5
MultiLineComment: &'input str = {
    r"(?m)\n=begin.*\n=end"
}

// 8.5
EndOfProgram: &'input str = {
    r"(?m)\n__END__.*"
}

// single-variable-assignment-expression
// variable
// operator-expression
